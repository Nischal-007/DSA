class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
       //using formula arr[k]=target-(arr[i]+arr[j]+arr[k])
       // = 0-(arr[i]+arr[j]+arr[k])
       // = -(arr[i]+arr[j]) 
      set<vector<int>> st;
      int n=nums.size();

      for(int i=0;i<n;i++){
        set<int> hashset;
        for(int j=i+1;j<n;j++){
            int k=-(nums[i]+nums[j]);

            if(hashset.find(k)!=hashset.end()){
                vector<int> temp={nums[i],nums[j],k};
                sort(temp.begin(),temp.end());
                st.insert(temp);
            }
            hashset.insert(nums[j]);
        }
      } vector<vector<int>> ans(st.begin(),st.end());
      return ans;
    }
};

//time complexity :O(N2 * log(no. of unique triplets))
//space complexity : O(2 * no. of the unique triplets) + O(N)

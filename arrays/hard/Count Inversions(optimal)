class Solution {
public:
    int merge(vector<int> &nums, int low,int mid,int high){
        vector<int> temp;
        int left=low;
        int right=mid+1;
        int cnt=0;

        while(left<=mid && right<=high){
            if(nums[left]<=nums[right]){
                temp.push_back(nums[left]);
                left++;
            }else{
                temp.push_back(nums[right]);
                cnt+=(mid-left+1);
                right++;
            }
        }
        while(left<=mid){
            temp.push_back(nums[left]);
            left++;
        }
        while(right<=high){
            temp.push_back(nums[right]);
            right++;
        }
        for(int i=low;i<=high;i++){
            nums[i]=temp[i-low];
        }
        return cnt;
    }
    int mergeSort(vector<int> &nums,int low,int high){
        int cnt=0;
        if(low>=high)return cnt;
        int mid=(low+high)/2;
        cnt+=mergeSort(nums,low,mid);
        cnt+=mergeSort(nums,mid+1,high);
        cnt+=merge(nums,low,mid,high);
        return cnt;
    }

    long long int numberOfInversions(vector<int> nums) {
        n=nums.size();
        return mergeSort(nums,0,n-1);
    }

};
//time complexity:O(N*logN)
//space complexity:O(N)

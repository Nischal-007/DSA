class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n=intervals.size();

        sort(intervals.begin(),intervals.end());
        vector<vector<int>> ans;

        for(int i=0;i<n;i++){
            int start=intervals[i][0];  
            int end=intervals[i][1];

//if ans is non empty and current end is less than last merged intervals end u skip that

            if(!ans.empty() && end<=ans.back()[1]){
                continue;
            }
            for(int j=i+1;j<n;j++){
//if next ele start is less than or equal than current interval end, end is expanded and merged
                if(intervals[j][0]<=end){
                    end=max(end,intervals[j][1]);
                }
                else{
                    break;
                }
            }
            ans.push_back({start,end});
        }
        return ans;
    }
};
//Time Complexity: O(N*logN) + O(2*N)
//Space Complexity: O(N), as we are using an answer list

class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(2, 0);

        sort(nums.begin(), nums.end());

        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                ans[0] = nums[i]; // duplicate
            }
        }

        // Now find missing:
        int expected = 1;
        for (int i = 0; i < n; i++) {
            if (nums[i] != expected) {
                ans[1] = expected; // missing
                break;
            }
            expected++;
        }

        // If missing number is n (at end)
        if (ans[1] == 0) {
            ans[1] = n;
        }

        return ans;
    }
};

//not all test cases are being passed, the edge cases in particular

//Input:[3 1 2 5 3] 
//Output:[3, 4] 
//A = 3, B = 4
//space complexity=O(1)
//time complexity=O(N*log N)+O(N) ~ O(N*log N)

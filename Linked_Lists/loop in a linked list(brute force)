class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* temp = head;
        unordered_map<ListNode*, int> nodeMap;

        while (temp != nullptr) {
            if (nodeMap.find(temp) != nodeMap.end()) {
                return true;
            }
            nodeMap[temp] = 1;
            temp = temp->next;
        }
        return false;
    }
};
--------------------------------------------------------

ðŸ“Œ Summary Table:

Case	   Time Complexity	Space Complexity
Average	    O(n)	        O(n)
Worst-case*	O(nÂ²)	        O(n)

*Worst case for unordered_map is rare and depends on poor hashing.
